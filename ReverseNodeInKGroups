/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode ReverseKGroup(ListNode head, int k) {
        
        // pre conditions
        if(head == null)
            return head;
        if(head.next == null)
            return head;
        if(k < 2)
            return head;
        
        
        int i = 1, // iterators
            j = 0,
            m = 0,
            numberOfSets = 0;
        
        ListNode tmpHead = head; // head place holder
        
        // find length of list
       while(tmpHead!=null )
       {
               j++;
               tmpHead = tmpHead.next;
       }
    
       // (list length)/(subset length)
       numberOfSets = j/k;
        
       // swap subsets 
       while(m < numberOfSets)
       {            
            // swap k nodes at a time
           head =  SwapNodes(head,i,i+k-1);
          
           // increment i for next subset to be reversed
           i+=k;
           
           // increment number of subset completed
           m++;
            
       }
        
        return head;
        
    }
    
    //reverses nodes in list from node m to node n    
    static public ListNode SwapNodes(ListNode head, int m, int n)
    {
        if(head == null)
            return head;
        if(head.next == null)
            return head;
        if( m == n )
            return head;
        ListNode pre = new ListNode(0),
                 current,
                 start,
                 next,
                 tmpNode;
        
        pre.next = head;
        
        int i = 1;
        
        while( i < m )
        {
            pre = pre.next;
            i++;
        }
        
        current = pre.next;
        tmpNode = pre.next;
        start = current.next;
        
        while( i < n )
        {
            next = start.next;
            start.next = current;
            current = start;
            start = next;
            i++;
        }
        
        if( m > 1)
        {
            pre.next = current;
        }
        else
            head = current;
        
        tmpNode.next = start;
       
        
        return head;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode MergeKLists(ListNode[] lists) {
        
        if(lists == null)
            return null;
        if(lists.Length < 1)
            return null;
        if(lists.Length == 1)
            return lists[0];
        
        
        // process array of lists to be merged
        for(int i = 1; i < lists.Length; i++)
        {
           // store resulting list in next list
           lists[i] = MergeTwoLists(lists[i],lists[i-1]);
                        
        }
        
        // last list shall have the resulting list
        return lists[lists.Length-1];
    }
    
    // merge two sorted linked list
    static public ListNode MergeTwoLists(ListNode l1, ListNode l2)
    {
        ListNode tmpHead = new ListNode(0),
                 tmpNode;
        
        tmpNode = tmpHead; // head of list holder
        
        // process both lists
        // by connecting minimun of two values 
        // between nodes on both lists
        while(l1!=null && l2!=null)
        {
            if(l1.val <= l2.val)
            {
                tmpNode.next = l1;
                l1 = l1.next;
            }
            else
            {
                tmpNode.next = l2;
                l2 = l2.next;
                
            }
            
            // set next pointer to minimun value
            // and advance node
            tmpNode = tmpNode.next;
        }
        
        // set last node to remaining tail
        if(l2 == null)
            tmpNode.next = l1;
        else
            tmpNode.next = l2;
        
        // return head place holder
        return tmpHead.next;
    }
}
